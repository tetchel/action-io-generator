
name: CI
on:
  push:
  pull_request:

jobs:
  detect-tag:
    name: Detect tag
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.detect-tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Detect tag
        id: detect-tag
        run: |
          TAG=$(git name-rev --name-only --tags HEAD)
          echo "Tag is '$TAG'"
          echo "Event name is '${{ github.event_name }}'"
          echo "::set-output name=tag::$TAG"

  compile-test:
    name: Compile and test
    runs-on: ubuntu-20.04
    env:
      TEST_FILE: test/generated/inputs-outputs.ts

    steps:
      - uses: actions/checkout@v2

      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run bundle

      ##### End compile steps

      - name: Prepare to test
        run: rm -v ${{ env.TEST_FILE }}

      - name: Test as library
        run: npm run test

      - name: Sniff test enum file
        shell: bash
        run: |
          set -x
          [[ -f ${{ env.TEST_FILE }} ]]
          grep "export enum Inputs" ${{ env.TEST_FILE }}
          grep "export enum Outputs" ${{ env.TEST_FILE }}
          LINES=$(wc -l ${{ env.TEST_FILE }} | awk '{ print $1 }')
          (( LINES > 30 ))

      - name: Clean up
        run: rm -v ${{ env.TEST_FILE }}

      - name: Test as CLI
        run: npm run test-cli

      - name: Sniff test new enum file
        shell: bash
        run: |
          set -x
          [[ -f ${{ env.TEST_FILE }} ]]
          grep "export enum Inputs" ${{ env.TEST_FILE }}
          grep "export enum Outputs" ${{ env.TEST_FILE }}
          LINES=$(wc -l ${{ env.TEST_FILE }} | awk '{ print $1 }')
          (( LINES > 30 ))

      - name: Clean up again
        run: rm -v ${{ env.TEST_FILE }}

      ##### End test steps

  package:
    name: Package
    needs: [ compile-test, detect-tag ]
    runs-on: ubuntu-20.04
    if: needs.detect-tag.outputs.tag != 'undefined'
    outputs:
      TAR_NAME: ${{ steps.tar.outputs.TAR_NAME }}

    steps:
      - uses: actions/checkout@v2
      - run: npm ci
      - run: npm run prepackage

      - name: Create tarball
        id: tar
        working-directory: dist
        run: |
          export TAR_NAME=action-io-generator-${{ needs.detect-tag.outputs.tag }}.tar.gz
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          tar -zvcf $TAR_NAME *
          du $TAR_NAME
          echo "::set-output name=TAR_NAME::$TAR_NAME"
          mv $TAR_NAME ..

      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
            path: ${{ env.TAR_NAME }}
            name: ${{ env.TAR_NAME }}
            if-no-files-found: error

  release:
    name: Release
    needs: [ package ]
    runs-on: ubuntu-20.04
    if: needs.detect-tag.outputs.tag != 'undefined'
    env:
      TAR_NAME: ${{ needs.package.outputs.TAR_NAME }}

    steps:
      - name: Download tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TAR_NAME }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          prerelease: false

      - name: Echo release URL
        run: |
          echo "================ View your release at: ================="
          echo "===== ${{ steps.create_release.outputs.html_url }} ====="
          echo "========================================================"

      # https://github.com/actions/upload-release-asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TAR_NAME }}
          asset_name: ${{ env.TAR_NAME }}
          asset_content_type: application/gzip
