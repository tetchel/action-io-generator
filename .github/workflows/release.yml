#### Not used currently
name: Release
on:
  push:
    branches: [ none :( ]

env:
  PACKAGE_NAME: action-io-generator

jobs:

  package:
    name: Package
    needs: [ compile_test, detect_tag ]
    runs-on: ubuntu-20.04
    outputs:
      TAR_NAME: ${{ steps.tar.outputs.TAR_NAME }}

    steps:
      - uses: actions/checkout@v2
      - uses: bahmutov/npm-install@v1
      - run: npm run prepackage

      - name: Rename dist to package name
        run: mv dist/ ${{ env.PACKAGE_NAME }}

      - name: Create tarball
        id: tar
        shell: bash
        run: |
          # The tar is versioned with the tag if it exists, else it's the short sha
          export TAG=${{ needs.detect_tag.outputs.tag }}
          export SHORT_SHA=${{ needs.detect_tag.outputs.short_sha }}
          TAR_VERSION=${TAG/undefined/$SHORT_SHA}

          export TAR_NAME=${{ env.PACKAGE_NAME }}-${TAR_VERSION}.tar.gz
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV

          tar -zvcf $TAR_NAME ${{ env.PACKAGE_NAME }}
          du -h $TAR_NAME
          echo "::set-output name=TAR_NAME::$TAR_NAME"

      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
            path: ${{ env.TAR_NAME }}
            name: ${{ env.TAR_NAME }}
            if-no-files-found: error

  release:
    name: Release
    needs: [ package ]
    runs-on: ubuntu-20.04
    if: needs.detect_tag.outputs.tag != 'undefined'
    env:
      TAR_NAME: ${{ needs.package.outputs.TAR_NAME }}

    steps:
      - name: Download tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TAR_NAME }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}

      # https://github.com/actions/upload-release-asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TAR_NAME }}
          asset_name: ${{ env.TAR_NAME }}
          asset_content_type: application/gzip

      - name: Echo release URL
        run: |
          export RELEASE_URL=${{ steps.create_release.outputs.html_url }}
          echo "===================== View your release at: ======================"
          echo "===> $RELEASE_URL"
          echo "===================== Download the tarball at: ==================="
          echo "===> ${RELEASE_URL/tag/download}/${{ env.TAR_NAME }}"
          echo "=================================================================="
