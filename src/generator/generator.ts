
import * as jsYaml from "js-yaml";
import * as fs from "fs";

import { promisify } from 'util';
import { ActionYml, InputOrOutput, InputOutputEntries } from './types';
import * as logger from "../util/logger";

export async function loadActionYml(actionYmlFile: string): Promise<ActionYml> {
    const actionYmlContents = (await promisify(fs.readFile)(actionYmlFile)).toString();
    const actionYmlRaw = jsYaml.safeLoad(actionYmlContents);

    if (actionYmlRaw == null) {
        throw new Error(`Action yaml load returned ${actionYmlRaw}`);
    }

    return actionYmlRaw as ActionYml;
}

export async function outputEnums(outFile: string, inputs: InputOutputEntries, outputs: InputOutputEntries): Promise<void> {
    let outputFileContents =
`
///// This file was auto-generated by action-io-generator. Do not edit by hand!

`;
    outputFileContents += enumify("Inputs", inputs);
    outputFileContents += `\n`;
    outputFileContents += enumify("Outputs", outputs);

    logger.log(`Outputting input and output enums to ${outFile}`);
    await promisify(fs.writeFile)(outFile, outputFileContents);
}

function enumify(enumName: string, inputsOrOutputs: [string, InputOrOutput][]) {
    inputsOrOutputs.sort();

    const OUTPUT_INDENT = " ".repeat(4);

    return inputsOrOutputs.reduce((inputsBuilder: string, [name, props]) => {
        inputsBuilder +=
`${OUTPUT_INDENT}/**
${OUTPUT_INDENT} * ${props.description.trim().replace("\\n", " ")}
${OUTPUT_INDENT} * Required: ${!!props.required}
${OUTPUT_INDENT} * Default: ${props.default !== undefined ? `"${props.default}"` : "None."}
${OUTPUT_INDENT} */
${OUTPUT_INDENT}${name.toUpperCase().replace(/-/g, "_")} = "${name}",
`;
        return inputsBuilder;
    }, `export enum ${enumName} {\n`) + `}\n`;
}
